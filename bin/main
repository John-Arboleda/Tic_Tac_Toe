#!/usr/bin/env ruby
# Player Class: Initialize player name and marker
class Player
  attr_reader :name, :marker

  def initialize(name, marker)
    @name = name
    @marker = marker
  end
end

# Board Class: Draws the board with the current play, checks valid moves, counts moves
class Board
  attr_accessor :plays_array
  attr_reader :moves_counter

  def initialize(plays_array)
    @plays_array = plays_array
    @moves_counter = 1
  end

  def print_board
    col_separator = ' | '
    row_separator = ' +---+---+---+'
    puts row_separator
    3.times do |i|
      print col_separator
      3.times { |j| print (@plays_array[j + (i * 3)]).to_s + col_separator }
      puts "\n#{row_separator}"
    end
  end

  def make_a_move(num, marker)
    if !num.is_a?(Integer) || !num.between?(1, 9)
      puts 'Invalid move. Please enter a number between 1 and 9'
    elsif @plays_array[num - 1].is_a?(String)
      puts 'Invalid move. Position already taken'
    else
      @plays_array[num - 1] = marker
      @moves_counter += 1
    end
  end
end

puts 'Enter player 1 name'
player1 = Player.new(gets.chomp, 'X')
puts 'Enter player 2 name'
player2 = Player.new(gets.chomp, 'O')
board1 = Board.new([1, 2, 3, 4, 5, 6, 7, 8, 9])
board1.print_board

module UserInteraction
  def user_move(user1, user2, play_board)
    player_turn = if play_board.moves_counter.odd?
      user1
    else
      user2
    end
    puts "#{player_turn.name} please enter a move:"
    move_p = gets.chomp.to_i
    play_board.make_a_move(move_p, player_turn.marker)
    play_board.print_board
    play_board.plays_array
  end
end

include UserInteraction

def game_flow(user1, user2, play_board)
  while play_board.moves_counter <= 9
    updated_board = user_move(user1, user2, play_board)
    # player_turn = if play_board.moves_counter.odd?
    #                 user1
    #               else
    #                 user2
    #               end
    # puts "#{player_turn.name} please enter a move:"
    # move_p = gets.chomp.to_i
    # play_board.make_a_move(move_p, player_turn.marker)
    # play_board.print_board
    if updated_board[0] == 1
      puts "Wins" #{player_turn.name} Wins!"
      return puts 'Game Over'
    elsif play_board.moves_counter > 9
      puts "It's a Draw"
      return puts 'Game Over'
    end
  end
end

# def print_winner(w_marker,player)
#   print "#{player.name} Wins!" if player.marker == w_marker
# end

game_flow(player1, player2, board1)
